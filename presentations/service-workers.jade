extends /layout.jade

block title
  title Serivce Workers

block slides
  +title-slide('Service Workers', 'writing offline first web applications in the future')
  section
    h2 Content + Shell === App
    ul
      li Email Clients
      li Magazine Readers
      li Games with downloadable levels
      li RSS readers
    p We want to store multiple caches for different types of content.
  section
    h2 Registering a service worker
    p Must be SSL
    :html
      <script>
        navigator.serviceWorker.register("/assets/v1/worker.js").then(
          function(serviceWorker) {
            console.log("success!");
            // To use the serviceWorker immediately,
            // you might call location.reload()
          }, function(error) {
            console.error("Installing the worker failed!:", error);
          });
      </script>
  section
    h2 First Load
    ul
      li All requests will come from the network, the service worker is not consulted
      li Documents live out their whole lives using the service worker they start with
      
      li Gracefull Fallback
      li Reasoning about a page that gets a service worker half way through its livetime is hard
  section
    h2 Subsequent Loads
    :javascript
      // hosted at: /assets/v1/worker.js
      this.version = 1;

      var base = 'https://videos.example.com';
      var inventory = base + '/services/inventory/data.json';

      this.addEventListener('install', function(e) {
      });

      this.addEventListener('fetch', function(e) {
        var url = e.request.url;
        console.log(url);
        if (url == inventory) {
          e.respondWith(new Response({
            statusCode: 200,
            body: JSON.stringify({/* ... */})
          }));
        }
      });
  section
    h2 Populating a Cache
    :javascript
      this.addEventListener('install', function(e) {
        // Create a cache of resources. Begins the process of fetching them.
        var shellResources = new Cache(
          base + "/assets/v1/base.css",
          base + "/assets/v1/app.js",
          base + "/assets/v1/logo.png",
          base + "/assets/v1/intro_video.webm",
        );

        // The coast is only clear when all the resources are ready.
        e.waitUntil(shellResources.ready());

        // Add Cache to the global so it can be used later during onfetch
        caches.set("shell-v1", shellResources);
      });
  section
    h2 Fallback to Cache
    :javascript
      this.addEventListener('fetch', function(e) {
        // No "onfetch" events are dispatched to the ServiceWorker until it
        // successfully installs.

        // All operations on caches are async, including matching URLs,
        // so we use Promises heavily. e.respondWith() even takes
        // Promises to enable this:
        e.respondWith(fetch(e.request).catch(function() {
          return caches.match(e.request);
        }));
      });
  +section-break('Offline First')
  section
    h2 Offline First
    :javascript
      var updatedFromFresh = false;
      showSpinner();
      
      var cacheUpdate = fetchData({useCache:true}).then(function (data) {
        if (!updatedFromFresh) {
          updatePage(data);
        }
      });

      var freshUpdate = fetchData({useCache:false}).then(function (data) {
        updatePage(data);
        updatedFromFresh = true;
      });

      cacheUpdate.catch(function () {
        return freshUpdate;
      }).catch(showNoDataError).then(hideSpinner);
  section
    h2 Fetch Data
    :javascript
      function fetchData(options) {
        var xhr = new XMLHttpRequest();
        xhr.open('get', 'http://api.example.com/gallery.json');

        if (opts.useCache) {
          if (!navigator.serviceWorker) {
            return Promise.reject(new Error('No worker'));
          }
          xhr.setRequestHeader('x-use-cache', 'true');
        }

        // `sendAsPromised` doesn't really exist yet
        return xhr.sendAsPromised();
      }
  section
    h2 support x-use-cache
    :javascript
      this.addEventListener('fetch', function(e) {
        var useCache = e.request.headers.has('x-use-cache');
        e.request.headers.delete('x-use-cache');
        if (useCache) {
          e.respondWith(caches.match(e.request));
        } else {
          e.respondWith(fetch(e.request));
          caches.get('api').update(e.request);
        }
      });